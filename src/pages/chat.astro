---
import Layout from '../layouts/Layout.astro';
import Chatcomponet from '../components/Chat.astro';
import ChatBoubble from '../components/ChatBoubble.astro';
import type{ Sesion } from '../types/types';
import Modal from '../components/Modal.astro';
import Loader from '../components/Loader.astro';
import { getSession } from "auth-astro/server";
const sesion = await getSession(Astro.request);
---

<Layout title="Chat" pathname={Astro.url.pathname} sesion={sesion as Sesion}>
    <section class="w-full chatSection p-2 md:max-h-full" transition:animate="none" style="overflow-y: auto;">
        {
            sesion ? (
                <div id="output" class="[grid-area:output] items-center overflow-y-auto h-full [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-track]:rounded-full [&::-webkit-scrollbar-track]:bg-gray-100  [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 scroll-smooth  "  >
                    <Modal message='borrar el historial' confirm='borrar'/>
                    <ul id="messages" class="flex flex-col md:max-w-[900px] max-w-[450px] mx-auto max-h-[550px] h-full px-3 gap-4 rounded-xl w-full">
                        <Loader/>
                    </ul>
                </div>
                <div class="[grid-area:input] ">
                    <Chatcomponet />
                </div>
            ):(
                <div id="output"  class="[grid-area:output]">
                    <div class="flex flex-col items-center justify-center p-4 h-full w-full">
                        <h1 class="text-zinc-500 dark:text-zinc-400 mb-8 w-full text-center text-2xl font-semibold">
                            Inicia sesión con Google para comenzar a chatear
                        </h1>
                    </div>
                </div>
            )
        }
    </section>
    <template id="message-template">
        <ChatBoubble />
    </template>
</Layout>
<style is:global>
    .chatSection {
        display: grid;
        grid-template-areas:
        "output output output"
        "input input input";
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows:  3fr 70px;
        gap: .5rem;
        height: 100%;
    }
    .You-message {
        place-self: end;
        flex-direction: row-reverse;
        &> div {
            box-shadow: 0 20px 25px -5px rgba(0, 176, 255, 0.4), 0 10px 10px -5px rgba(0, 176, 255, 0.2);
        }

    }
    .Bot-message> div {
        background-color: #e0e0e0;
    }

    #send[disabled] {
        opacity: 0.5;
        pointer-events: none;
        color: gray;
    }
</style>
<script is:inline>
    window.addEventListener('animationend', () => {
        if (window.location.pathname === '/chat'){
            window.location.reload()
        }
    })
</script>

<script>
import { GoogleGenerativeAI } from "@google/generative-ai";
import { $ } from './../utils';
const apiKey: string = 'AIzaSyD6AqMG6N09SxOjTwmwfu09GXtws1dam2c';
const $btn: HTMLElement | null = $("#send");
const $userDropdown: HTMLElement | null = $("#userDropdown");
const $borrar: HTMLElement | null = $("#borrar");
const $input: HTMLInputElement | null = $("#chat") as HTMLInputElement;
const $output: HTMLElement | null = $("#output");
const $form: HTMLFormElement | null = $("#form") as HTMLFormElement;
const $messages: HTMLElement | null = $("#messages");
const $template: HTMLTemplateElement | null = $("#message-template") as HTMLTemplateElement;
const $loader: HTMLElement | null = $("#loader");
const genAI: GoogleGenerativeAI = new GoogleGenerativeAI(apiKey);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
let isLoading = false;
const timeConfig: Intl.DateTimeFormatOptions = {
            month: 'short',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
        }
const chat = model.startChat();
let sessionData: { user?: { name: string; image: string }; error?: string } | null = null;
let messages: Array<{ role: string; content: string; time: string; userName: string|undefined }> = [];

const getMessages = async (): Promise<{ messages: Array<{ role: string; content: string; time: string ; userName: string }> }> => {
    const res: Response = await fetch('/api/messages', {
        method: 'POST',
        body: JSON.stringify({
            userName: sessionData?.user?.name
        })
    });

    if (res.ok) {
        const data = await res.json();

        // Verifica si el objeto `data` tiene la propiedad `messages` y que sea un array
        if (data && Array.isArray(data.messages)) {
            return { messages: data.messages }; // Retorna los mensajes si están presentes y son un array
        } else {
            return { messages: [] }; // Si no hay mensajes o no es un array, retorna un array vacío
        }
    }
    return { messages: [] }; // En caso de error en la respuesta, retorna un array vacío
};


const saveMessage = async (message: { role: string; content: string; created_at?: string, userName: string | undefined }): Promise<void> => {
    const res: Response = await fetch('/api/addMessages', {
        method: 'POST',
        body: JSON.stringify({
            message: message
        })
    });
    if(res.status === 200) {
        console.log('Mensaje guardado correctamente')
    } else {
        console.log('Error al guardar mensaje')
    }
}
const deleteMessages = async (): Promise<void> => {
    const res: Response = await fetch('/api/deleteMessages', {
        method: 'POST',
        body: JSON.stringify({
            userName: sessionData?.user?.name
        })
    });
}
if (typeof window !== 'undefined') {
    isLoading = true;
    const fetchSession = async (): Promise<void> => {
        try {
            const res: Response = await fetch('/api/session');
            if (res.ok) {
                sessionData = await res.json();
                const result:{messages:Array<{role:string,content:string,time:string; userName: string}>}=await getMessages();
                messages = result.messages;
                isLoading = false;
                if(!isLoading){
                    $loader?.classList.add("hidden");
                }
                if (messages.length > 0) {
                    messages.forEach(message => {
                        addMessage(message.role, message.content, message.time);
                    });
                }
                if (messages.length === 0) {
                    const InitialMessage = {
                        role: "Bot",
                        content: "Hola, soy Amelia, una inteligente asistente virtual que te ayudará a obtener información sobre la salud y bienestar y a tomar decisiones informadas para mejorar tu vida.",
                        time: new Date().toLocaleTimeString('es-ES', timeConfig),
                        userName: sessionData?.user?.name,
                    };
                    addMessage("Bot", InitialMessage.content, InitialMessage.time);
                    await saveMessage(InitialMessage)

                }
            } else {
                sessionData = { error: "No hay sesión activa" };
            }
        } catch (err) {
            console.error("Error al obtener la sesión:", err);
        }
    };
    fetchSession();
}
$form?.addEventListener('submit', async (e: Event) => {
    e.preventDefault();
    const messageText: string = $input.value.trim();
    if (messageText !== "") {
        $input.value = "";
    }
    addMessage("You", messageText, new Date().toLocaleTimeString('es-ES', timeConfig));
    $btn?.setAttribute("disabled", "");

    const userMessage: { role: string; content: string; time?: string, userName: string | undefined } = {
        role: "You",
        content: messageText,
        userName: sessionData?.user?.name,
        time: new Date().toLocaleTimeString('es-ES', timeConfig),
    };


    await saveMessage(userMessage)


    const reply: { response: { text: () => string } } = await chat.sendMessage(messageText);
    addMessage("Bot", reply.response.text(), new Date().toLocaleTimeString('es-ES', timeConfig));
    const botMessage: { role: string; content: string; time?: string, userName: string | undefined} = {
        role: "Bot",
        content: reply.response.text(),
        userName: sessionData?.user?.name,
        time: new Date().toLocaleTimeString('es-ES', timeConfig),
    };
    await saveMessage(botMessage)

    $btn?.removeAttribute('disabled');
    if ($output) {
        $output.scrollTop = $output.scrollHeight;
    }
    localStorage.setItem('messages', JSON.stringify(messages));
});

$borrar?.addEventListener('click', () => {
    if ($userDropdown) {
        $userDropdown.classList.add("hidden");
    }
    if ($output) {
        const $modal: HTMLElement | null = $output.querySelector("#popup-modal");
        if ($modal) {
            $modal.classList.remove("hidden");
            $modal.querySelector("#close")?.addEventListener("click", () => {
                $modal.classList.add("hidden");
            });
            $modal.querySelector("#confirm")?.addEventListener("click", async() => {
                await deleteMessages()
                $modal.classList.add("hidden");
                window.location.reload();
            });
            $modal.querySelector("#cancel")?.addEventListener("click", () => {
                $modal.classList.add("hidden");
            });
        }
    }
});

function addMessage(sender: string, message: string, time: string): void {
    const clonedTemplate: DocumentFragment = $template?.content?.cloneNode(true) as DocumentFragment;

    const $messageContainer: HTMLElement | null = clonedTemplate.querySelector("#message-container");
    const $who: HTMLElement | null = clonedTemplate.querySelector("#sender-name");
    const $time: HTMLElement | null = clonedTemplate.querySelector("#time");
    const $img: HTMLImageElement | null = clonedTemplate.querySelector("#sender-img") as HTMLImageElement;
    const $text: HTMLElement | null = clonedTemplate.querySelector("#message");

    if ($messageContainer) {
        $messageContainer.classList.add(`${sender}-message`);
    }

    if ($who) {
        if (sessionData?.user?.name) {
            $who.textContent = sender === "You" ? sessionData?.user?.name : 'Amelia';
        }
    }
    if ($text) {
        $text.textContent = message;
    }
    if ($time) {
        $time.textContent = time;
    }
    if ($img) {
        if (sessionData?.user?.image) {
            $img.src = sender === "You" ? sessionData?.user?.image : 'https://flowbite.com/docs/images/people/profile-picture-4.jpg';
        }
    }
    if ($messages) {
        $messages.appendChild($messageContainer as HTMLElement);
    }
}
</script>
