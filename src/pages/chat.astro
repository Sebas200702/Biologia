---
import Layout from '../layouts/Layout.astro';
import ChatBoubble from '../components/ChatBoubble.astro';
import ChatComponet from '../components/ChatComponet.astro';
import type { Sesion, Message, Messages } from '../types/types';
import { getSession } from "auth-astro/server";

const sesion = await getSession(Astro.request);
const baseUrl = process.env.NODE_ENV === 'production' ? 'https://biologia-taupe.vercel.app' : 'http://localhost:4321';
const userName: string = sesion?.user?.name ?? "Usuario desconocido";

const getMessages = async (): Promise<{ messages: Array<Message> }> => {
    const res: Response = await fetch(`${baseUrl}/api/messages`, {
        method: 'POST',
        body: JSON.stringify({
            userName: sesion?.user?.name
        })
    });

    if (res.ok) {
        const data = await res.json();
        if (data && Array.isArray(data.messages)) {
            // Añadir un mensaje predeterminado
            const defaultMessage: Message = {
                role: "Bot",
                content: "¡Bienvenido al chat! ¿En qué puedo ayudarte hoy?",
                userName,
            };
            return { messages: [defaultMessage, ...data.messages] }; // Coloca el mensaje predeterminado primero
        } else {
            return { messages: [] };
        }
    }
    return { messages: [] };
};

const result = await getMessages();

---

<Layout title="Chat" pathname={Astro.url.pathname} sesion={sesion as Sesion}>
    <section class="w-full chatSection p-2 md:max-h-full max-h-[580px]" transition:animate="none" style="overflow-y: auto;">
        <ChatComponet sesion={sesion as Sesion} messages={result.messages as Messages } />
    </section>
    <template id="message-template">
        <ChatBoubble />
    </template>
</Layout>
<style is:global>
    .chatSection {
        display: grid;
        grid-template-areas:
        "output output output"
        "input input input";
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows:  3fr 70px;
        gap: .5rem;
        height: 100%;
    }
    .You-message {
        place-self: end;
        flex-direction: row-reverse;
        &> div {
            box-shadow: 0 20px 25px -5px rgba(0, 176, 255, 0.4), 0 10px 10px -5px rgba(0, 176, 255, 0.2);
        }

    }
    .Bot-message> div {
        background-color: #e0e0e0;
    }

    #send[disabled] {
        opacity: 0.5;
        pointer-events: none;
        color: gray;
    }
</style>

<script>
import { GoogleGenerativeAI } from "@google/generative-ai";
import { $ } from './../utils';
import type { Message } from "../types/types";
const apiKey: string = 'AIzaSyD6AqMG6N09SxOjTwmwfu09GXtws1dam2c';
const $btn: HTMLElement | null = $("#send");
const $userDropdown: HTMLElement | null = $("#userDropdown");
const $borrar: HTMLElement | null = $("#borrar");
const $input: HTMLInputElement | null = $("#chat") as HTMLInputElement;
const $output: HTMLElement | null = $("#output");
const $form: HTMLFormElement | null = $("#form") as HTMLFormElement;
const $messages: HTMLElement | null = $("#messages");
const $template: HTMLTemplateElement | null = $("#message-template") as HTMLTemplateElement;
const genAI: GoogleGenerativeAI = new GoogleGenerativeAI(apiKey);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
const timeConfig: Intl.DateTimeFormatOptions = {
            month: 'short',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
        }
const chat = model.startChat();
let sessionData: { user?: { name: string; image: string }; error?: string } | null = null;



const saveMessage = async (message: Message): Promise<void> => {
    const res: Response = await fetch('/api/addMessages', {
        method: 'POST',
        body: JSON.stringify({
            message: message
        })
    });
    if(res.status === 200) {
        console.log('Mensaje guardado correctamente')
    } else {
        console.log('Error al guardar mensaje')
    }
}

const deleteMessages = async (): Promise<void> => {
    const res: Response = await fetch('/api/deleteMessages', {
        method: 'POST',
        body: JSON.stringify({
            userName: sessionData?.user?.name
        })
    });
}

if (typeof window !== 'undefined') {

    const fetchSession = async (): Promise<void> => {
        try {
            const res: Response = await fetch('/api/session');
            if (res.ok) {
                sessionData = await res.json();
            } else {
                sessionData = { error: "No hay sesión activa" };
            }
        } catch (err) {
            console.error("Error al obtener la sesión:", err);
        }
    };
    fetchSession();
}

$form?.addEventListener('submit', async (e: Event) => {
    e.preventDefault();
    const messageText: string = $input.value.trim();
    if (messageText !== "") {
        $input.value = "";
    }
    addMessage("You", messageText, new Date().toLocaleTimeString('es-ES', timeConfig));
    $btn?.setAttribute("disabled", "");
    const userMessage: Message = {
        role: "You",
        content: messageText,
        userName: sessionData?.user?.name,
        time: new Date().toLocaleTimeString('es-ES', timeConfig),
    };

    await saveMessage(userMessage)
    const chunks = await chat.sendMessageStream(messageText);
    let reply: string = "";
    const $botmessage = addMessage("Bot", "", new Date().toLocaleTimeString('es-ES', timeConfig));
    console.log(chunks);
    for await (const item of chunks.stream) {
        if (!item.candidates) {
            continue;
        }
        const [choice] = item.candidates;
        const content = choice.content.parts[0].text ?? "";
        reply += content;
        if ($botmessage) {
            $botmessage.textContent = reply;
        }  }
  const botMessage: Message = {
            role: "Bot",
            content: reply,
            userName: sessionData?.user?.name,
            time: new Date().toLocaleTimeString('es-ES', timeConfig),
        };
    await saveMessage(botMessage)
    $btn?.removeAttribute('disabled');
    if ($output) {
        $output.scrollTop = $output.scrollHeight;
    }
});

$borrar?.addEventListener('click', () => {
    if ($userDropdown) {
        $userDropdown.classList.add("hidden");
    }
    if ($output) {
        const $modal: HTMLElement | null = $output.querySelector("#popup-modal");
        if ($modal) {
            $modal.classList.remove("hidden");
            $modal.querySelector("#close")?.addEventListener("click", () => {
                $modal.classList.add("hidden");
            });
            $modal.querySelector("#confirm")?.addEventListener("click", async() => {
                await deleteMessages()
                $modal.classList.add("hidden");
                window.location.reload();
            });
            $modal.querySelector("#cancel")?.addEventListener("click", () => {
                $modal.classList.add("hidden");
            });
        }
    }
});

function addMessage(sender: string, message: string, time: string): HTMLElement | null {
    const clonedTemplate: DocumentFragment = $template?.content?.cloneNode(true) as DocumentFragment;
    const $messageContainer: HTMLElement | null = clonedTemplate.querySelector("#message-container");
    const $who: HTMLElement | null = clonedTemplate.querySelector("#sender-name");
    const $time: HTMLElement | null = clonedTemplate.querySelector("#time");
    const $img: HTMLImageElement | null = clonedTemplate.querySelector("#sender-img") as HTMLImageElement;
    const $text: HTMLElement | null = clonedTemplate.querySelector("#message");

    if ($messageContainer) {
        $messageContainer.classList.add(`${sender}-message`);
    }

    if ($who) {
        if (sessionData?.user?.name) {
            $who.textContent = sender === "You" ? sessionData?.user?.name : 'Amelia';
        }
    }
    if ($text) {
        $text.textContent = message;
    }
    if ($time) {
        $time.textContent = time;
    }
    if ($img) {
        if (sessionData?.user?.image) {
            $img.src = sender === "You" ? sessionData?.user?.image : 'https://flowbite.com/docs/images/people/profile-picture-4.jpg';
            $img.alt = sender === "You" ? `Avatar de ${sessionData?.user?.name}` : 'Avatar de Amelia';
        }
    }
    if ($messages) {
        $messages.appendChild($messageContainer as HTMLElement);
    }
    return $text;
}
</script>
