---
import Layout from '../layouts/Layout.astro';
import Chatcomponet from '../components/Chat.astro';
import ChatBoubble from '../components/ChatBoubble.astro';
import type{ Sesion } from '../types/types';
import Modal from '../components/Modal.astro';
import { getSession } from "auth-astro/server";
const sesion = await getSession(Astro.request);
---

<Layout title="Chat" pathname={Astro.url.pathname} sesion={sesion as Sesion}>
    <section class="w-full h-full max-h-[600px] chatSection p-2 md:max-h-full" transition:animate="none" >
        {
            sesion ? (
                <div id="output" class="[grid-area:output] max-h-[600px] md:max-h-full items-center overflow-y-auto [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-track]:rounded-full [&::-webkit-scrollbar-track]:bg-gray-100  [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 scroll-smooth  "  >
                    <Modal message='borrar el historial' confirm='borrar'/>
                    <ul id="messages" class="flex flex-col md:max-w-[900px] max-h-[600px] md:max-h-full gap-4 p-4 mx-auto px-6 rounded-xl w-full ">
                    </ul>
                </div>
                <div class="[grid-area:input] ">
                    <Chatcomponet />
                </div>
            ):(
                <div id="output"  class="[grid-area:output]">
                    <div class="flex flex-col items-center justify-center p-4 h-full w-full">
                        <h1 class="text-zinc-500 dark:text-zinc-400  mb-8 w-full text-center text-2xl font-semibold">
                            Inicia sesión con Google para comenzar a chatear
                        </h1>
                    </div>
                </div>
            )
        }
    </section>
    <template id="message-template">
        <ChatBoubble />
    </template>
</Layout>
<style is:global>
    .chatSection {
        display: grid;
        grid-template-areas:
        "output output output"
        "input input input";
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows:  3fr auto;
        gap: 1rem;
        height: 100%;
    }
    .You-message {
        place-self: end;
        &> div {
            background-color: #00b0ff;
            box-shadow: 0 20px 25px -5px rgba(12, 1, 112, 0.5), 0 10px 10px -5px rgba(54, 6, 143, 0.2);
        }

    }
    .Bot-message> div {
        background-color: #e0e0e0;
    }

    #send[disabled] {
        opacity: 0.5;
        pointer-events: none;
        color: gray;
    }
</style>
<script is:inline>
    window.addEventListener('animationend', () => {
        window.location.reload()
    })
</script>

<script>
import { GoogleGenerativeAI } from "@google/generative-ai";
import {$} from './../utils'
const getApiKey = async () => {
  const res = await fetch('/api/apiKey');
  if (res.ok) {
    return await res.json();
  } else {
    throw new Error('Error al obtener la apiKey');
  }
};
const apiKey = 'AIzaSyD6AqMG6N09SxOjTwmwfu09GXtws1dam2c'
const $btn: HTMLElement | null = $("#send");
const $userDropdown: HTMLElement | null = $("#userDropdown");
const $borrar: HTMLElement | null = $("#borrar");
const $input: HTMLInputElement | null = $("#chat") as HTMLInputElement;
const $output: HTMLElement | null = $("#output");
const $form: HTMLFormElement | null = $("#form") as HTMLFormElement;
const $messages: HTMLElement | null = $("#messages");
const $template: HTMLTemplateElement | null = $("#message-template") as HTMLTemplateElement;
const genAI: GoogleGenerativeAI = new GoogleGenerativeAI(apiKey);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
const chat = model.startChat();
let messages: Array<{ role: string; content: string; time: string }> = JSON.parse(localStorage.getItem('messages') || '[]');
let sessionData: { user?: { name: string; image: string }; error?: string } | null = null;
let isLoading: boolean = false;

if (typeof window !== 'undefined') {
    isLoading = true;
  const fetchSession = async (): Promise<void> => {
    try {
      const res: Response = await fetch('/api/session');
      if (res.ok) {
        sessionData = await res.json();
        if (messages.length > 0) {
          messages.forEach(message => {
            addMessage(message.role, message.content, message.time);
          });
        }
        if (messages.length === 0) {
          const InitialMessage = {
            role: "Bot",
            content: "Hola, soy Amelia, una inteligente asistente virtual que te ayudará a obtener información sobre la salud y bienestar y a tomar decisiones informadas para mejorar tu vida.",
            time: new Date().toLocaleTimeString(),
          };
          addMessage("Bot", InitialMessage.content, InitialMessage.time);
          messages.push(InitialMessage);
        }
      } else {
        sessionData = { error: "No hay sesión activa" };
      }
    } catch (err) {
      console.error("Error al obtener la sesión:", err);
    }
  };
  fetchSession();
}
if (isLoading) {

}

$form?.addEventListener('submit', async (e: Event) => {
  e.preventDefault();
  const messageText: string = $input.value.trim();
  if (messageText !== "") {
    $input.value = "";
  }
  addMessage("You", messageText, new Date().toLocaleTimeString());
  $btn?.setAttribute("disabled", "");

  const userMessage = {
    role: "You",
    content: messageText,
    time: new Date().toLocaleTimeString(),
  };
  messages.push(userMessage);
  const reply = await chat.sendMessage(messageText);
  addMessage("Bot", reply.response.text(), new Date().toLocaleTimeString());
  const botMessage = {
    role: "Bot",
    content: reply.response.text(),
    time: new Date().toLocaleTimeString(),
  };
  messages.push(botMessage);
  $btn?.removeAttribute('disabled');
  if ($output) {
    $output.scrollTop = $output.scrollHeight;
  }
  localStorage.setItem('messages', JSON.stringify(messages));
});

$borrar?.addEventListener('click', () => {
  if ($userDropdown) {
    $userDropdown.classList.add("hidden");
  }
  if($output){
    const $modal = $output.querySelector("#popup-modal");
    if ($modal) {
      $modal.classList.remove("hidden");
      $modal.querySelector("#close")?.addEventListener("click", () => {
        $modal.classList.add("hidden");
      });
      $modal.querySelector("#confirm")?.addEventListener("click", () => {
        localStorage.removeItem('messages');
        $modal.classList.add("hidden");
        window.location.reload();
      });
      $modal.querySelector("#cancel")?.addEventListener("click", () => {
        $modal.classList.add("hidden");
      });
    }
  }
});

function addMessage(sender: string, message: string, time: string): void {
  const clonedTemplate: DocumentFragment = $template?.content?.cloneNode(true) as DocumentFragment;

  const $messageContainer: HTMLElement | null = clonedTemplate.querySelector("#message-container");
  const $who: HTMLElement | null = clonedTemplate.querySelector("#sender-name");
  const $time: HTMLElement | null = clonedTemplate.querySelector("#time");
  const $img: HTMLImageElement | null = clonedTemplate.querySelector("#sender-img") as HTMLImageElement;
  const $text: HTMLElement | null = clonedTemplate.querySelector("#message");

  if ($messageContainer) {
    $messageContainer.classList.add(`${sender}-message`);
  }

  if ($who) {
    if(sessionData?.user?.name) {
    $who.textContent = sender === "You" ? sessionData?.user?.name : 'Amelia';
    }
  }
  if ($text) {
    $text.textContent = message;
  }
  if ($time) {
    $time.textContent = time;
  }
  if ($img) {
    if (sessionData?.user?.image) {
    $img.src = sender === "You" ? sessionData?.user?.image : 'https://flowbite.com/docs/images/people/profile-picture-4.jpg';
    }
  }
  if ($messages) {
    $messages.appendChild($messageContainer as HTMLElement);
  }
}
</script>
